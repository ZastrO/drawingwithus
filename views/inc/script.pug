script.
	jQuery.event.special.mousemove = {
		setup: function( _, ns, handle ) {
			this.addEventListener("mousemove", handle, { passive: !ns.includes("noPreventDefault") });
		}
	};

script.
	var roomConfig = {
		bgColor: "#{room.bgColor}",
		fadeTime: #{room.fadeTime},
		color: "000000"
	};
if loggedIn 
	script roomConfig.color = "#{defaults.color}";

script.
	if(typeof sessionStorage.id === 'undefined'){
		sessionStorage.id = Math.floor(Math.random()*1000000);
	}
	var room = localStorage.room = '#{room.id}';
	var id = sessionStorage.id;
	//- var broker = new Worker('/js/broker.js');


	if( typeof localStorage.name == 'undefined' ){
		if( navigator.userAgent.indexOf("Chrome/") > 0 ) {
			localStorage.name = "Chrome";
		} else if( navigator.userAgent.indexOf("Safari/") > 0 ) {
			localStorage.name = "Safari";
		} else if( navigator.userAgent.indexOf("Firefox/") > 0 ) {
			localStorage.name = "FireFox";
		} else if( navigator.userAgent.indexOf(".NET") > 0 ) {
			localStorage.name = "Explorer";
		}
	}

	var name = localStorage.name;

	var canvas = document.getElementById('canvas');
	var context = canvas.getContext('2d');
	var offset = $('#canvas').offset();
		$( window ).resize(function() {
			offset = $('#canvas').offset();
		});
	context.lineJoin = 'round';
	context.lineCap = 'round';

	var lastXY = {x:null,y:null};
	var users = {};
	var color = id;

	users[id] = {
		name:name,
		brush: 'line', 
		x:0, y:0, 
		lastX:null, lastY:null,
		room:room, 
		color: roomConfig.color
	};

	$('#colorSelector').ColorPicker({
		color: roomConfig.color,
		onShow: function (colpkr) {
			$(colpkr).fadeIn(500);
			return false;
		},
		onHide: function (colpkr) {
			$(colpkr).fadeOut(500);
			return false;
		},
		onChange: function (hsb, hex, rgb) {
			$('#colorSelector div').css('background', `linear-gradient(#${hex} 0, #${hex} 100%) no-repeat center left`);
			color = users[id].color = hex;
			socket.emit('colorPicker', {
				id:id, 
				room:users[id].room, 
				color: hex 
			});
		}
	});
	$('#colorSelector div').css('background', `linear-gradient(#${roomConfig.color} 0, #${roomConfig.color} 100%) no-repeat center left`);

	var brushes = {
		line: function(user,x,y,options){
			context.beginPath();
			context.moveTo(user.lastX, user.lastY);
			context.lineTo(x, y);
			context.stroke();
			
			user.lastX = x;
			user.lastY = y;
		}
	};

	function draw(x,y,id,brush){
		var user = users[id];

		context.fillStyle = '#'+users[id].color;
		context.lineWidth = 1;
		context.strokeStyle = '#'+users[id].color;
		/*context.fillRect(x,y,3,3);*/
		if( !user.lastX && !user.lastY ){
				context.beginPath();
				context.moveTo(x, y);
				user.lastX = x;
				user.lastY = y;
		} else {
			brushes[brush](user,x,y);
		}
		
	}

	var socket = io();
	var drawNow = false;

	socket.emit('init', {
		id:id, 
		name:name, 
		room:users[id].room, 
		color: roomConfig.color
	});

	//- console.log(socket);

	socket.on('problems', function(data){
		switch (data.type){
			case '404':
				$('#canvas').replaceWith(`<h1><br><br><br>${data.msg}</h1>`);
				$('.ui, .openui').remove();
			break;
		}
	});

	socket.on('chat', function(data){
		$('.chat-ui .list-group').append(
			`<li class="list-group-item">
				<span class="name">${data.name}</span> ${data.msg}
			</li>`
		);
	});

	socket.on('newRoom', function(data){
		context.clearRect(0, 0, canvas.width, canvas.height);
		//- var img = new Image;
		//- img.onload = function(){
		//-   context.drawImage(img,0,0); // Or at whatever offset you like
		//- };
		//- img.src = data;
		console.log( data );
	});

	socket.on('cursor', function(data){
		var rect = canvas.getBoundingClientRect();

		if( $('.mouse_'+data.id).length < 1 && 
			data.room == users[id].room && 
			data.id != id ){
			users[data.id] = {
				name:data.name,
				brush:data.brush, 
				x:data.x, y:data.y, 
				lastX:null, lastY:null, 
				room:data.room, 
				color: data.color 
			};
			$('.pencils').append(
				$(`<div class="mouse mouse_${data.id}" data-name="${data.name}" style="top:${data.y+offset.top}px;left:${data.x+offset.left}px;">
					<img src="/images/pencil.png" >
					<div class="message"></div>
				</div>`)
			);
		} else if (data.room == users[id].room) {
			var x = (data.x * ( rect.right - rect.left ) ) / (canvas.width );
			var y = (data.y * ( rect.bottom - rect.top ) ) / (canvas.height );
			$('.mouse_'+data.id).css({
				top: (y-4)+'px',
				left: x+'px'
			});
		} else if (data.room != users[id].room) {
			$('.mouse_'+data.id).remove();
		}
		
		if(data.drawNow){
			draw(data.x, data.y, data.id, data.brush);
		} else {
			users[data.id].lastX = null;
			users[data.id].lastY = null;

		}
	});

	socket.on('users', function(data) {
		users = {};
		$('.pencils .mouse').remove();
		data.forEach(user => users[user.id] = user);
		$('.userList').empty();
		$.each(data, function() {
			$('.userList').append(`
				<li class="list-group-item">
					${this.name}<div style="background: #${this.color};" title="#${this.color}"></div>
				</li>`
			);
		});
	});
	socket.on('colorUpdate', function(data) {
		users[data.id].color = data.color;
	});
	socket.on('ink', function(data) {
		$('#colorSelector div').css('backgroundPosition', ((1 - data.level/data.cap) * -100) + 'px 0px');
	});

	socket.on('newVote', function(data) {
		if ( ($('#voteToClear .badge').length > 0) && (data.percent != 100) ){
			$('#voteToClear .badge').html(data.percent+'%');
		} else if(data.percent != 100) {
			$('#voteToClear').append(`<span class="badge">${data.percent}%</span>`);
		}
	});

	socket.on('clear', function() {
		context.clearRect(0, 0, canvas.width, canvas.height);
		$('#voteToClear .badge').remove();
	});


	$('.open-draw-ui, .close-draw-ui').click(function(){
		$('.draw-ui, .open-draw-ui').toggle('slide');
	});
	$('.open-chat-ui, .close-chat-ui').click(function(){
		$('.chat-ui, .open-chat-ui').toggle('slide', {direction: 'right'});
	});
	setTimeout(function(){
		if( $('#msg').is(':focus') ){
			return;
		}
		$('.close-draw-ui, .close-chat-ui').click();
	}, 4000);

	$('#brush').change(function(e){
		var val = $(e.target).val();
		console.log('Brush',val);
		users[id].brush = val;
	});

	$('#chat').submit(function(e){
		e.preventDefault();
		let payload = 
		socket.emit('chat',{
			user: id,
			name: name,
			room: room,
			msg: $(e.target).find('#msg').val()
		});
		$('#msg').val('');
	});
	$('#voteToClear').click(function() {
		socket.emit('initVote', {
			id: id, 
			name: name, 
			room: users[id].room
		});
	});

	$('body').on('mousedown touchstart', drawNowFunc);
	//$('body').bind('touchstart',drawNowFunc);
	$('body').on('mouseup touchend touchcancel', noDrawFunc);
	//$('body').bind('touchend', 	noDrawFunc);

	$('#canvas').on('mousemove touchmove', touchHandler);

	function drawNowFunc(){
		users[id].lastX = null; 
		users[id].lastY = null;
		
		drawNow = 1;
	}

	function noDrawFunc(){
		drawNow = 0; 
		socket.emit('coordinates', {
			id:id,
			name:name,
			drawNow:drawNow
		});
	}

	function touchHandler(e){
		//- e.preventDefault();

		var rect = canvas.getBoundingClientRect();

		if(e.type == "touchmove") {
			e.pageX = e.originalEvent.touches[0].pageX;
			e.pageY = e.originalEvent.touches[0].pageY;
		}

		var x = Math.round(e.offsetX/(rect.right-rect.left)*canvas.width);
		var y = Math.round(e.offsetY/(rect.bottom-rect.top)*canvas.height);
		
		//console.log("x: "+ x  +" -- y: " + y );

		//- broker.postMessage({
		//- 	id:id,
		//- 	name:name,
		//- 	brush:users[id].brush,
		//- 	drawNow:drawNow,
		//- 	x:x,y:y, 
		//- 	room:users[id].room, 
		//- 	color:users[id].color
		//- });

		socket.emit('coordinates', {
			id:id,
			name:name,
			brush:users[id].brush || 'line',
			drawNow:drawNow,
			x:x,y:y, 
			color:users[id].color
		});
		if( drawNow ){
			drawNow = 2;
		}
	}

	if(roomConfig.fadeTime !== 0) {
		setInterval(function(){
			let imgData = context.getImageData(0,0, canvas.width, canvas.height);
			let pattern = context.createPattern(canvas, 'repeat');
			context.clearRect(0,0, canvas.width, canvas.height);

			context.save();
			context.globalAlpha = 0.8;
			context.fillStyle = pattern;
			context.beginPath();
				context.rect(0,0, canvas.width, canvas.height);
				context.fill();
			context.closePath();
			//- context.putImageData(imgData, 0,0)
			context.restore();
		}, 4500);

		//- setInterval(function(){
		//- 	context.save();
		//- 	context.globalAlpha = 0.3;
		//- 	context.fillStyle = 'rgb(255,255,255)';
		//- 	context.fillRect( 0, 0, $(canvas).width(), $(canvas).height());
		//- 	context.restore();
		//- }, 30000);
	}

	window.onbeforeunload = closingCode;
	function closingCode(){
		socket.emit('exit', {
			user:id,
			name:name,
			roomFrom:room
		});
		return null;
	}